{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/functions.ts","../../src/classes.ts","../../node_modules/svelte/store/index.mjs","../../src/gameData.ts","../../src/tabs/Achievements.svelte","../../src/components/ProgressTable.svelte","../../src/components/XpBar.svelte","../../src/components/Coins.svelte","../../src/components/FishBars.svelte","../../src/components/RequiredBar.svelte","../../src/tabs/GoneFishing.svelte","../../src/components/BoatBars.svelte","../../src/components/ItemBars.svelte","../../src/tabs/Shop.svelte","../../src/components/SkillBars.svelte","../../src/tabs/Skills.svelte","../../src/tabs/Settings.svelte","../../src/Sidebar.svelte","../../src/tabs/Reincarnation.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root.host) {\n        return root;\n    }\n    return document;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.2' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { Fishing, Skill, SkillRequirement, FishingRequirement, AgeRequirement, CoinRequirement, EvilRequirement, Item, Boat, Requirement, BoatRequirement, } from \"./classes\";\nimport { baseLifespan, GameData, getGameData, units, tempData, setGameData, updateSpeed, baseGameSpeed, } from \"./gameData\";\nexport const daysToYears = (days) => Math.floor(days / 365);\nexport const days = (day) => Math.floor(day % 365);\nexport function calculatedAge(day) {\n    return `Age ${14 + daysToYears(day)} Day ${days(day)}`;\n}\nexport const getTotalExpenses = (game_data) => {\n    let totalExpense = 0;\n    game_data.itemData.forEach((item) => {\n        if (item.selected) {\n            totalExpense += item.expense;\n        }\n    });\n    return totalExpense;\n};\nexport function getBaseLog(x, y) {\n    return Math.log(y) / Math.log(x);\n}\nexport function applySkillData(skill) {\n    let barInfo = {};\n    barInfo.xpBar = { name: skill.name, width: skill.xp / skill.maxXp };\n    barInfo.level = skill.level;\n    barInfo.effect = skill.effectDescription;\n    barInfo.xpPerDay = skill.xpGain;\n    barInfo.xpLeft = skill.xpLeft;\n    barInfo.maxLevel = skill.maxLevel;\n    return barInfo;\n}\nexport function capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexport function applySpeed(value) {\n    // Make sure to divide by updateSpeed\n    return (value * getGameSpeed()) / updateSpeed;\n}\nexport function getGameSpeed() {\n    return baseGameSpeed * +!getGameData().paused * +isAlive();\n}\nexport function isAlive() {\n    return getGameData().day < baseLifespan;\n}\nexport const needRequirements = (data_value, requiredFor // Class Fish or Skill\n) => {\n    let reqs = data_value.requirements.get(requiredFor.name);\n    // Reqs is an array of requirements\n    if (reqs == undefined) {\n        return false;\n    }\n    for (let i = 0; i < reqs.length; i++) {\n        if (!reqs[i].isCompleted()) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const filtered = (data_value, allRequiredFor) => {\n    // returns all Fish that have completed requirements + 1 that doesn't.\n    const filteredTasks = [];\n    for (let i = 0; i < allRequiredFor.length; i++) {\n        if (!needRequirements(data_value, allRequiredFor[i])) {\n            filteredTasks.push(allRequiredFor[i]);\n        }\n        else {\n            filteredTasks.push(allRequiredFor[i]);\n            break;\n        }\n    }\n    return filteredTasks;\n};\nexport const getRequiredString = (data_value, requiredFor) => {\n    let reqs = data_value.requirements.get(requiredFor.name);\n    let requiredString = `Required: `;\n    for (let i = 0; i < reqs.length; i++) {\n        let sameTypeReqs = reqs[i].requirements;\n        let type = reqs[i].type;\n        for (let j = 0; j < sameTypeReqs.length; j++) {\n            if ([\"fishing\", \"skill\"].includes(type)) {\n                let name = sameTypeReqs[j].name;\n                let levelNow = type == \"skill\"\n                    ? data_value.skillsData.get(name).level\n                    : data_value.fishingData.get(name).level;\n                requiredString += `${name} level ${levelNow}/${sameTypeReqs[j].requirement}, `;\n            }\n            else if (type == \"age\") {\n                requiredString += `${daysToYears(data_value.day)} years old, `;\n            }\n            else if (type == \"boat\") {\n                requiredString += `${sameTypeReqs[j].name}, `;\n            }\n            else if (type == \"coin\") {\n                requiredString += `${sameTypeReqs[j].requirement} coins, `;\n            }\n        }\n    }\n    let endIndex = requiredString.length - 1;\n    requiredString = requiredString.slice(0, endIndex - 1);\n    return requiredString;\n};\nexport function getCategoryFromEntityName(categoryType, entityName) {\n    for (let categoryName in categoryType) {\n        let category = categoryType[categoryName];\n        if (category.includes(entityName)) {\n            return category;\n        }\n    }\n}\nexport function getNextEntity(data, categoryType, entityName) {\n    let category = getCategoryFromEntityName(categoryType, entityName);\n    let nextIndex = category.indexOf(entityName) + 1;\n    if (nextIndex > category.length - 1)\n        return null;\n    let nextEntityName = category[nextIndex];\n    let nextEntity = data[nextEntityName];\n    return nextEntity;\n}\nexport function formatNumber(number) {\n    // what tier? (determines SI symbol)\n    if (number < 1000) {\n        return number.toFixed(1);\n    }\n    let tier = (Math.log10(number) / 3) | 0;\n    // if zero, we don't need a suffix\n    if (tier == 0)\n        return number;\n    // get suffix and determine scale\n    let suffix = units[tier];\n    let scale = Math.pow(10, tier * 3);\n    // scale the number\n    let scaled = number / scale;\n    // format number and add suffix\n    return scaled.toFixed(2) + suffix;\n}\nexport function lowestLevelSkill(data_value) {\n    let xpDict = new Map();\n    const skills = data_value.skillsData;\n    skills.forEach((s) => {\n        if (!needRequirements(data_value, s)) {\n            xpDict.set(s.name, s.level);\n        }\n    });\n    if (xpDict.size == 0) {\n        return skills.get(\"Strength\");\n    }\n    let lowest = new Map([...xpDict.entries()].sort((a, b) => a[1] - b[1]));\n    return skills.get(lowest.entries().next().value[0]);\n}\nexport function highestTierFish(data_value) {\n    const fish = data_value.fishingData;\n    let availableFish = new Map();\n    fish.forEach((f) => {\n        if (!needRequirements(data_value, f)) {\n            availableFish.set(f.name, f);\n        }\n    });\n    if (availableFish.size == 0) {\n        return fish.get(\"Sun Fish\");\n    }\n    let highest = Array.from(availableFish.values()).pop();\n    return highest;\n}\nexport function applyMultipliers(value, multipliers) {\n    let totalAfter = Object.values(multipliers).reduce((num, total) => (total *= num), value);\n    return totalAfter;\n}\nexport const getIncomeMultipliers = (task) => {\n    let multipliers = {};\n    getGameData().fishingData.forEach((fish) => {\n        multipliers[fish.name] = kind(task, fish.baseData.description, fish.effect);\n    });\n    getGameData().skillsData.forEach((skill) => {\n        multipliers[skill.name] = kind(task, skill.baseData.description, skill.effect);\n    });\n    getGameData().itemData.forEach((item) => {\n        multipliers[item.name] = kind(task, item.baseData.description, item.effect);\n    });\n    function kind(task, description, effect) {\n        switch (description) {\n            case \"Fishing Pay\":\n                return effect;\n            case \"Lake Pay\":\n                if (task.baseData.category == \"lake\")\n                    return effect;\n                break;\n            case \"River Pay\":\n                if (task.baseData.category == \"river\")\n                    return effect;\n                break;\n            case \"Ocean Pay\":\n                if (task.baseData.category == \"ocean\")\n                    return effect;\n                break;\n            case \"Payara Pay\":\n                if (task.name == \"Payara\")\n                    return effect;\n                break;\n            case \"Northern Pay\":\n                if (task.name == \"Northern\")\n                    return effect;\n                break;\n            case \"Whale Pay\":\n                if (task.name == \"Whale\")\n                    return effect;\n                break;\n            default:\n                return 1;\n        }\n        return 1;\n    }\n    return multipliers;\n};\nexport const getXpMultipliers = (task) => {\n    let multipliers = {};\n    getGameData().fishingData.forEach((fish) => {\n        multipliers[fish.name] = kind(task, fish.baseData.description, fish.effect);\n    });\n    getGameData().skillsData.forEach((skill) => {\n        multipliers[skill.name] = kind(task, skill.baseData.description, skill.effect);\n    });\n    getGameData().itemData.forEach((item) => {\n        multipliers[item.name] = kind(task, item.baseData.description, item.effect);\n    });\n    function kind(task, description, effect) {\n        switch (description) {\n            case \"All Xp\":\n                return effect;\n            case \"Fishing Skill Xp\":\n                if (task instanceof Skill && task.baseData.category == \"fishing\")\n                    return effect;\n                break;\n            case \"Boating Skill Xp\":\n                if (task instanceof Skill && task.baseData.category == \"boating\")\n                    return effect;\n                break;\n            case \"Fishing Xp\":\n                if (task instanceof Fishing)\n                    return effect;\n                break;\n            case \"Skill Xp\":\n                if (task instanceof Skill)\n                    return effect;\n                break;\n            case \"Lake Xp\":\n                if (task.baseData.category == \"lake\")\n                    return effect;\n                break;\n            case \"River Xp\":\n                if (task.baseData.category == \"river\")\n                    return effect;\n                break;\n            case \"Ocean Xp\":\n                if (task.baseData.category == \"ocean\")\n                    return effect;\n                break;\n            case \"Jigging Xp\":\n                if (task.name == \"Jigging\")\n                    return effect;\n                break;\n            case \"Casting Xp\":\n                if (task.name == \"Casting\")\n                    return effect;\n                break;\n            case \"Hooking Xp\":\n                if (task.name == \"Hooking\")\n                    return effect;\n                break;\n            case \"Trolling Xp\":\n                if (task.name == \"Trolling\")\n                    return effect;\n                break;\n            case \"Reeling Xp\":\n                if (task.name == \"Reeling\")\n                    return effect;\n                break;\n            case \"Strength Xp\":\n                if (task.name == \"Strength\")\n                    return effect;\n                break;\n            case \"Concentration Xp\":\n                if (task.name == \"Concentration\")\n                    return effect;\n                break;\n            case \"Intelligence Xp\":\n                if (task.name == \"Intelligence\")\n                    return effect;\n                break;\n            case \"Patience Xp\":\n                if (task.name == \"Patience\")\n                    return effect;\n                break;\n            case \"Communication Xp\":\n                if (task.name == \"Communication\")\n                    return effect;\n                break;\n            case \"Ambition Xp\":\n                if (task.name == \"Ambition\")\n                    return effect;\n                break;\n            case \"Sailing Xp\":\n                if (task.name == \"Sailing\")\n                    return effect;\n                break;\n            case \"Navigation Xp\":\n                if (task.name == \"Navigation\")\n                    return effect;\n                break;\n            default:\n                return 1;\n        }\n        return 1;\n    }\n    return multipliers;\n};\nexport function coinAmounts(coins) {\n    let coinsObj = {};\n    if (coins < 0) {\n        return { p: 0, g: 0, s: 0, c: 0 };\n    }\n    let tiers = [\"p\", \"g\", \"s\"];\n    let leftOver = coins;\n    let i = 0;\n    for (let tier of tiers) {\n        let x = Math.floor(leftOver / Math.pow(10, (tiers.length - i) * 2));\n        leftOver = Math.floor(leftOver - x * Math.pow(10, (tiers.length - i) * 2));\n        coinsObj[tier] = x;\n        i += 1;\n    }\n    coinsObj[\"c\"] = leftOver;\n    return coinsObj;\n}\nexport function replaceSaveDict(dict, saveDict) {\n    let requirements;\n    GameData.subscribe((data) => {\n        requirements = data.requirements;\n    });\n    for (let key in dict) {\n        if (!(key in saveDict)) {\n            saveDict[key] = dict[key];\n        }\n        else if (dict == requirements) {\n            if (saveDict[key].type != tempData[\"requirements\"][key].type) {\n                saveDict[key] = tempData[\"requirements\"][key];\n            }\n        }\n    }\n    for (let key in saveDict) {\n        if (!(key in dict)) {\n            delete saveDict[key];\n        }\n    }\n}\nexport function replaceSavedItems(map, saveMap) {\n    map.forEach((val, key) => {\n        let { baseData, expenseMultipliers, level } = saveMap.get(key);\n        saveMap.set(key, new Item(baseData, expenseMultipliers, level));\n    });\n    return saveMap;\n}\nexport function replaceSavedBoats(map, saveMap) {\n    map.forEach((val, key) => {\n        let { baseData } = saveMap.get(key);\n        saveMap.set(key, new Boat(baseData));\n    });\n    return saveMap;\n}\nexport function replaceSavedFishing(map, saveMap) {\n    map.forEach((val, key) => {\n        let { baseData, level, maxLevel, xp, xpMultipliers, incomeMultipliers } = saveMap.get(key);\n        saveMap.set(key, new Fishing(baseData, level, maxLevel, xp, xpMultipliers, incomeMultipliers));\n    });\n    return saveMap;\n}\nexport function replaceSavedSkills(map, saveMap) {\n    map.forEach((val, key) => {\n        let { baseData, level, maxLevel, xp, xpMultipliers } = saveMap.get(key);\n        saveMap.set(key, new Skill(baseData, level, maxLevel, xp, xpMultipliers));\n    });\n    return saveMap;\n}\nexport function replaceSavedRequirements(map, saveMap) {\n    map.forEach((val, key) => {\n        let reqArr = saveMap.get(key);\n        let newReqArr = reqArr.map((req) => {\n            let requirements = req.requirements;\n            if (req.type == \"fishing\") {\n                return new FishingRequirement(requirements);\n            }\n            else if (req.type == \"skill\") {\n                return new SkillRequirement(requirements);\n            }\n            else if (req.type == \"coins\") {\n                return new CoinRequirement(requirements);\n            }\n            else if (req.type == \"evil\") {\n                return new EvilRequirement(requirements);\n            }\n            else if (req.type == \"boat\") {\n                return new BoatRequirement(requirements);\n            }\n            else if (req.type == \"age\") {\n                return new AgeRequirement(requirements);\n            }\n            else {\n                return new Requirement(requirements, \"Unknown\");\n            }\n        });\n        saveMap.set(key, newReqArr);\n    });\n    return saveMap;\n}\nexport function createData(data, baseData) {\n    baseData.forEach((base, key) => {\n        createEntity(data, base);\n    });\n}\nexport function createEntity(data, entity) {\n    if (\"income\" in entity) {\n        data.set(entity.name, new Fishing(entity));\n    }\n    else if (\"maxXp\" in entity) {\n        data.set(entity.name, new Skill(entity));\n    }\n    else if (\"bought\" in entity) {\n        data.set(entity.name, new Boat(entity));\n    }\n    else {\n        data.set(entity.name, new Item(entity));\n    }\n}\nfunction replacer(key, value) {\n    if (value instanceof Map) {\n        return {\n            dataType: \"Map\",\n            value: Array.from(value.entries()), // or with spread: value: [...value]\n        };\n    }\n    else {\n        return value;\n    }\n}\nfunction reviver(key, value) {\n    if (typeof value === \"object\" && value !== null) {\n        if (value.dataType === \"Map\") {\n            return new Map(value.value);\n        }\n    }\n    return value;\n}\nexport function saveGameData(data_value) {\n    if (!data_value.paused) {\n        localStorage.setItem(\"GameDataSave\", JSON.stringify(data_value, replacer));\n    }\n}\nexport function loadGameData() {\n    let GameDataSave = JSON.parse(localStorage.getItem(\"GameDataSave\"), reviver);\n    if (GameDataSave !== null) {\n        let data_value;\n        let requirements;\n        let fishingData;\n        let skillsData;\n        let itemData;\n        let boatData;\n        GameData.subscribe((data) => {\n            data_value = data;\n            requirements = data.requirements;\n            fishingData = data.fishingData;\n            skillsData = data.skillsData;\n            itemData = data.itemData;\n            boatData = data.boatData;\n        });\n        replaceSaveDict(data_value, GameDataSave);\n        replaceSavedRequirements(requirements, GameDataSave.requirements);\n        replaceSavedFishing(fishingData, GameDataSave.fishingData);\n        replaceSavedSkills(skillsData, GameDataSave.skillsData);\n        replaceSavedItems(itemData, GameDataSave.itemData);\n        replaceSavedBoats(boatData, GameDataSave.boatData);\n        setGameData(GameDataSave);\n    }\n}\nexport function resetGameData() {\n    localStorage.clear();\n    location.reload();\n}\n","import { applySpeed, daysToYears, applyMultipliers, getXpMultipliers, getIncomeMultipliers, } from \"./functions\";\nimport { getGameData, subtractCoins } from \"./gameData\";\nexport class Task {\n    constructor(baseData, level = 0, maxLevel = 0, xp = 0, xpMultipliers = {}) {\n        this.baseData = baseData;\n        this.name = baseData.name;\n        this.level = level;\n        this.maxLevel = maxLevel;\n        this.xp = xp;\n        this.xpMultipliers = xpMultipliers;\n    }\n    get maxXp() {\n        let maxXp = Math.round(this.baseData.maxXp * (this.level + 1) * Math.pow(1.01, this.level));\n        return maxXp;\n    }\n    get xpLeft() {\n        return Math.round(this.maxXp - this.xp);\n    }\n    get maxLevelMultiplier() {\n        let maxLevelMultiplier = 1 + this.maxLevel / 10;\n        return maxLevelMultiplier;\n    }\n    get xpGain() {\n        this.xpMultipliers = getXpMultipliers(this);\n        return applyMultipliers(10, this.xpMultipliers) * this.maxLevelMultiplier;\n    }\n    get barWidth() {\n        return ((this.maxXp - this.xpLeft) / this.maxXp) * 100;\n    }\n    increaseXp() {\n        this.xp += applySpeed(this.xpGain);\n        if (this.xp >= this.maxXp) {\n            let excess = this.xp - this.maxXp;\n            while (excess >= 0) {\n                this.level += 1;\n                excess -= this.maxXp;\n            }\n            this.xp = this.maxXp + excess;\n        }\n    }\n}\nexport class Fishing extends Task {\n    constructor(baseData, level = 0, maxLevel = 0, xp = 0, xpMultipliers = {}, incomeMultipliers = {}) {\n        super(baseData, level, maxLevel, xp, xpMultipliers);\n        this.incomeMultipliers = incomeMultipliers;\n    }\n    get levelMultiplier() {\n        let levelMultiplier = 1 + Math.log10(this.level + 1);\n        return levelMultiplier;\n    }\n    get income() {\n        this.incomeMultipliers = getIncomeMultipliers(this);\n        return (applyMultipliers(this.baseData.income, this.incomeMultipliers) *\n            this.levelMultiplier);\n    }\n    get effect() {\n        let effect = 1 + this.baseData.effect * this.level;\n        return effect;\n    }\n    get effectDescription() {\n        let description = this.baseData.description;\n        let text = \"x\" + String(this.effect.toFixed(2)) + \" \" + description;\n        return text;\n    }\n}\nexport class Skill extends Task {\n    constructor(baseData, level = 0, maxLevel = 0, xp = 0, xpMultipliers = {}) {\n        super(baseData, level, maxLevel, xp, xpMultipliers);\n    }\n    get effect() {\n        let effect = 1 + this.baseData.effect * this.level;\n        return effect;\n    }\n    get effectDescription() {\n        let description = this.baseData.description;\n        let text = \"x\" + String(this.effect.toFixed(2)) + \" \" + description;\n        return text;\n    }\n}\nexport class Item {\n    constructor(baseData, expenseMultipliers = {}, level = 0) {\n        this.baseData = baseData;\n        this.name = baseData.name;\n        this.expenseMultipliers = expenseMultipliers;\n        this.level = level;\n    }\n    get selected() {\n        return this.baseData.selected;\n    }\n    select() {\n        this.baseData.selected = !this.baseData.selected;\n    }\n    deselect() {\n        this.baseData.selected = false;\n    }\n    get upgradePrice() {\n        return this.baseData.upgradePrice * Math.pow(2, 0.5 * this.level);\n    }\n    get effect() {\n        if (!this.selected)\n            return 1;\n        let effect = this.baseData.effect * (1 + this.level / 100);\n        return effect;\n    }\n    get effectDescription() {\n        let description = this.baseData.description;\n        let text = \"x\" + String(this.effect.toFixed(2)) + \" \" + description;\n        return text;\n    }\n    get expense() {\n        return applyMultipliers(this.baseData.expense, this.expenseMultipliers);\n    }\n    upgrade() {\n        if (this.baseData.upgradePrice <= getGameData().coins) {\n            subtractCoins(this.upgradePrice);\n            this.level += 1;\n        }\n    }\n}\nexport class Boat {\n    constructor(baseData) {\n        this.baseData = baseData;\n        this.name = baseData.name;\n    }\n    get bought() {\n        return this.baseData.bought;\n    }\n    buy() {\n        if (this.bought) {\n            return;\n        }\n        if (this.baseData.price <= getGameData().coins) {\n            subtractCoins(this.baseData.price);\n            this.baseData.bought = true;\n        }\n    }\n}\nexport class Requirement {\n    constructor(requirements, type) {\n        this.requirements = requirements;\n        this.completed = false;\n        this.type = type;\n    }\n    getCondition(requirement) {\n        return false;\n    }\n    isCompleted() {\n        if (this.completed) {\n            return true;\n        }\n        for (let requirement of this.requirements) {\n            if (!this.getCondition(requirement)) {\n                return false;\n            }\n        }\n        this.completed = true;\n        return true;\n    }\n}\nexport class FishingRequirement extends Requirement {\n    constructor(requirements) {\n        super(requirements, \"fishing\");\n    }\n    getCondition(requirement) {\n        return (getGameData().fishingData.get(requirement.name).level >=\n            requirement.requirement);\n    }\n}\nexport class SkillRequirement extends Requirement {\n    constructor(requirements) {\n        super(requirements, \"skill\");\n    }\n    getCondition(requirement) {\n        return (getGameData().skillsData.get(requirement.name).level >=\n            requirement.requirement);\n    }\n}\nexport class CoinRequirement extends Requirement {\n    constructor(requirements) {\n        super(requirements, \"coins\");\n    }\n    getCondition(requirement) {\n        return getGameData().coins >= requirement.requirement;\n    }\n}\nexport class AgeRequirement extends Requirement {\n    constructor(requirements) {\n        super(requirements, \"age\");\n    }\n    getCondition(requirement) {\n        return daysToYears(getGameData().day) >= requirement.requirement;\n    }\n}\nexport class BoatRequirement extends Requirement {\n    constructor(requirements) {\n        super(requirements, \"boat\");\n    }\n    getCondition(requirement) {\n        return (getGameData().boatData.get(requirement.name).bought ==\n            requirement.requirement);\n    }\n}\nexport class EvilRequirement extends Requirement {\n    constructor(requirements) {\n        super(requirements, \"evil\");\n    }\n    getCondition(requirement) {\n        return getGameData().evil >= requirement.requirement;\n    }\n}\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { FishingRequirement, SkillRequirement, CoinRequirement, Fishing, Skill, BoatRequirement, } from \"./classes\";\nimport { applySpeed, getTotalExpenses, highestTierFish, lowestLevelSkill, } from \"src/functions\";\nimport { writable } from \"svelte/store\";\nimport \"svelte/internal\";\nexport const requirements = new Map([\n    [\"Sun Fish\", []],\n    [\"Perch\", [new FishingRequirement([{ name: \"Sun Fish\", requirement: 10 }])]],\n    [\n        \"Bass\",\n        [\n            new FishingRequirement([{ name: \"Perch\", requirement: 10 }]),\n            new BoatRequirement([{ name: \"Row Boat\", requirement: true }]),\n        ],\n    ],\n    [\n        \"Trout\",\n        [\n            new FishingRequirement([{ name: \"Bass\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Strength\", requirement: 10 }]),\n        ],\n    ],\n    [\n        \"Waleye\",\n        [\n            new FishingRequirement([{ name: \"Trout\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Strength\", requirement: 30 }]),\n            new BoatRequirement([{ name: \"Silver Bullet\", requirement: true }]),\n        ],\n    ],\n    [\n        \"Northern Pike\",\n        [\n            new FishingRequirement([{ name: \"Waleye\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Ambition\", requirement: 50 }]),\n        ],\n    ],\n    [\n        \"Lake Sturgeon\",\n        [\n            new FishingRequirement([{ name: \"Northern Pike\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Patience\", requirement: 80 }]),\n            new BoatRequirement([{ name: \"Bass Boat\", requirement: true }]),\n        ],\n    ],\n    // River\n    // 1. Pirana\n    // 2. Salmon\n    // 2. Silver Drum\n    // 3. Armoured Catfish\n    // 4. Electric Eel\n    // 5. Pacu\n    // 6. Payara\n    [\"Pirana\", [new SkillRequirement([{ name: \"Strength\", requirement: 10 }])]],\n    [\n        \"Salmon\",\n        [\n            new FishingRequirement([{ name: \"Pirana\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Strength\", requirement: 30 }]),\n        ],\n    ],\n    [\n        \"Silver Drum\",\n        [\n            new FishingRequirement([{ name: \"Salmon\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Intelligence\", requirement: 40 }]),\n            new BoatRequirement([{ name: \"Canoe\", requirement: true }]),\n        ],\n    ],\n    [\n        \"Armoured Catfish\",\n        [\n            new FishingRequirement([{ name: \"Silver Drum\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Casting\", requirement: 100 }]),\n        ],\n    ],\n    [\n        \"Electric Eel\",\n        [\n            new FishingRequirement([{ name: \"Armoured Catfish\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Strength\", requirement: 300 }]),\n            new BoatRequirement([{ name: \"River Skiff\", requirement: true }]),\n        ],\n    ],\n    [\n        \"Pacu\",\n        [\n            new FishingRequirement([{ name: \"Electric Eel\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Trolling\", requirement: 500 }]),\n        ],\n    ],\n    [\n        \"Payara\",\n        [\n            new FishingRequirement([{ name: \"Pacu\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Reeling\", requirement: 1000 }]),\n            new BoatRequirement([{ name: \"Airboat\", requirement: true }]),\n        ],\n    ],\n    // Ocean\n    // 1. Cod\n    // 2. Mackerel\n    // 2. Angle Fish\n    // 4. Grouper\n    // Stingray\n    // 6. Barracuda\n    // 3. Bluefin tuna\n    // 5. Blue Marlin\n    // Swordfish\n    // Shark\n    // Whale\n    [\n        \"Cod\",\n        [\n            new SkillRequirement([\n                { name: \"Patience\", requirement: 200 },\n                { name: \"Concentration\", requirement: 200 },\n            ]),\n            new BoatRequirement([{ name: \"Sail Boat\", requirement: true }]),\n        ],\n    ],\n    [\n        \"Mackerel\",\n        [\n            new FishingRequirement([{ name: \"Cod\", requirement: 10 }]),\n            new SkillRequirement([\n                { name: \"Docking\", requirement: 400 },\n                { name: \"Netting\", requirement: 200 },\n            ]),\n        ],\n    ],\n    [\n        \"Angle Fish\",\n        [\n            new FishingRequirement([{ name: \"Mackerel\", requirement: 10 }]),\n            new SkillRequirement([\n                { name: \"Docking\", requirement: 700 },\n                { name: \"Turning\", requirement: 600 },\n            ]),\n        ],\n    ],\n    [\n        \"Grouper\",\n        [\n            new FishingRequirement([{ name: \"Angle Fish\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Anchoring\", requirement: 1000 }]),\n        ],\n    ],\n    [\n        \"Stingray\",\n        [\n            new FishingRequirement([{ name: \"Grouper\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Docking\", requirement: 1200 }]),\n        ],\n    ],\n    [\n        \"Barracuda\",\n        [\n            new FishingRequirement([{ name: \"Stingray\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Turning\", requirement: 1400 }]),\n        ],\n    ],\n    [\n        \"Bluefin Tuna\",\n        [\n            new FishingRequirement([{ name: \"Barracuda\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Sailing\", requirement: 1500 }]),\n            new BoatRequirement([{ name: \"Yacht\", requirement: true }]),\n        ],\n    ],\n    [\n        \"Blue Marlin\",\n        [\n            new FishingRequirement([{ name: \"Bluefin Tuna\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Sailing\", requirement: 1800 }]),\n        ],\n    ],\n    [\n        \"Swordfish\",\n        [\n            new FishingRequirement([{ name: \"Blue Marlin\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Navigation\", requirement: 1900 }]),\n        ],\n    ],\n    [\n        \"Shark\",\n        [\n            new FishingRequirement([{ name: \"Swordfish\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Stability\", requirement: 2000 }]),\n        ],\n    ],\n    [\n        \"Whale\",\n        [\n            new FishingRequirement([{ name: \"Shark\", requirement: 10 }]),\n            new SkillRequirement([{ name: \"Stability\", requirement: 2500 }]),\n            new BoatRequirement([{ name: \"Whaling Ship\", requirement: true }]),\n        ],\n    ],\n    // FUNDAMENTALS //\n    // Strength\n    // Concentration\n    // Intelligence\n    // Patience\n    // Ambition\n    // Communication\n    [\"Strength\", []],\n    [\"Concentration\", []],\n    [\n        \"Intelligence\",\n        [new SkillRequirement([{ name: \"Concentration\", requirement: 10 }])],\n    ],\n    [\n        \"Patience\",\n        [new SkillRequirement([{ name: \"Concentration\", requirement: 20 }])],\n    ],\n    [\n        \"Ambition\",\n        [new SkillRequirement([{ name: \"Intelligence\", requirement: 30 }])],\n    ],\n    [\n        \"Communication\",\n        [\n            new SkillRequirement([\n                { name: \"Intelligence\", requirement: 30 },\n                { name: \"Strength\", requirement: 40 },\n            ]),\n        ],\n    ],\n    // FISHING SKILLS\n    // Casting\n    // Jigging\n    // Trolling\n    // Reeling\n    // Hooking\n    // Netting\n    // Whaling\n    [\"Casting\", []],\n    [\"Jigging\", [new SkillRequirement([{ name: \"Strength\", requirement: 30 }])]],\n    [\n        \"Trolling\",\n        [new SkillRequirement([{ name: \"Concentration\", requirement: 40 }])],\n    ],\n    [\"Reeling\", [new SkillRequirement([{ name: \"Strength\", requirement: 60 }])]],\n    [\"Hooking\", [new SkillRequirement([{ name: \"Jigging\", requirement: 40 }])]],\n    [\n        \"Netting\",\n        [new SkillRequirement([{ name: \"Concentration\", requirement: 120 }])],\n    ],\n    [\"Whaling\", [new SkillRequirement([{ name: \"Strength\", requirement: 250 }])]],\n    // Boating Skills\n    // Docking\n    // Turning\n    // Anchoring\n    // Sailing\n    // Navigation\n    // Stability\n    [\n        \"Docking\",\n        [\n            new SkillRequirement([\n                { name: \"Concentration\", requirement: 200 },\n                { name: \"Intelligence\", requirement: 200 },\n            ]),\n        ],\n    ],\n    [\n        \"Turning\",\n        [\n            new SkillRequirement([\n                { name: \"Concentration\", requirement: 320 },\n                { name: \"Patience\", requirement: 250 },\n            ]),\n        ],\n    ],\n    [\"Anchoring\", [new FishingRequirement([{ name: \"Cod\", requirement: 15 }])]],\n    [\n        \"Sailing\",\n        [new FishingRequirement([{ name: \"Angle Fish\", requirement: 10 }])],\n    ],\n    [\n        \"Navigation\",\n        [new SkillRequirement([{ name: \"Trolling\", requirement: 400 }])],\n    ],\n    [\n        \"Stability\",\n        [new SkillRequirement([{ name: \"Anchoring\", requirement: 500 }])],\n    ],\n    [\"Row Boat\", [new CoinRequirement([{ name: \"Coins\", requirement: 500 }])]],\n    [\n        \"Silver Bullet\",\n        [new CoinRequirement([{ name: \"Coins\", requirement: 1000 }])],\n    ],\n    [\"Bass Boat\", [new CoinRequirement([{ name: \"Coins\", requirement: 50000 }])]],\n    [\"Canoe\", [new CoinRequirement([{ name: \"Coins\", requirement: 500000 }])]],\n    [\n        \"River Skiff\",\n        [new CoinRequirement([{ name: \"Coins\", requirement: 1000000 }])],\n    ],\n    [\"Airboat\", [new CoinRequirement([{ name: \"Coins\", requirement: 5000000 }])]],\n    [\n        \"Sail Boat\",\n        [new CoinRequirement([{ name: \"Coins\", requirement: 10000000 }])],\n    ],\n    [\"Yacht\", [new CoinRequirement([{ name: \"Coins\", requirement: 50000000 }])]],\n    [\n        \"Whaling Ship\",\n        [new CoinRequirement([{ name: \"Coins\", requirement: 500000000 }])],\n    ],\n    // ITEMS //\n    // Rod\n    // Book\n    // Net\n    // Hook\n    // Bait\n    // Ham Sandwich\n    // Pliers\n    // Fish Finder\n    // House\n    [\"Rod\", [new CoinRequirement([{ name: \"Coins\", requirement: 500 }])]],\n    [\"Book\", [new CoinRequirement([{ name: \"Coins\", requirement: 3000 }])]],\n    [\"Net\", [new CoinRequirement([{ name: \"Coins\", requirement: 30000 }])]],\n    [\"Hook\", [new CoinRequirement([{ name: \"Coins\", requirement: 50000 }])]],\n    [\"Bait\", [new CoinRequirement([{ name: \"Coins\", requirement: 300000 }])]],\n    [\n        \"Ham Sandwich\",\n        [new CoinRequirement([{ name: \"Coins\", requirement: 500000 }])],\n    ],\n    [\"Pliers\", [new CoinRequirement([{ name: \"Coins\", requirement: 1000000 }])]],\n    [\n        \"Fish Finder\",\n        [new CoinRequirement([{ name: \"Coins\", requirement: 5000000 }])],\n    ],\n    [\"House\", [new CoinRequirement([{ name: \"Coins\", requirement: 10000000 }])]],\n]);\nexport let GameData = writable({\n    day: 0,\n    coins: 0,\n    fishingData: new Map(),\n    skillsData: new Map(),\n    itemData: new Map(),\n    boatData: new Map(),\n    requirements,\n    paused: false,\n    autoTrain: false,\n    autoFish: false,\n    rebirthOneCount: 0,\n    rebirthTwoCount: 0,\n    currentlyFishing: null,\n    currentSkill: null,\n    evil: 0,\n});\nexport const update = (paused, autoTrain, autoFish) => {\n    if (paused) {\n        return;\n    }\n    increaseDay();\n    updateCurrentFish();\n    updateCurrentSkill();\n    updateItemExpenses();\n    if (autoTrain) {\n        autoSetCurrentSkill();\n    }\n    if (autoFish) {\n        autoSetCurrentlyFishing();\n    }\n};\nexport const getGameData = () => {\n    let data_value;\n    GameData.subscribe((data) => {\n        data_value = data;\n    });\n    return data_value;\n};\nexport const setGameData = (savedGameData) => {\n    let skill = savedGameData.currentSkill;\n    let fish = savedGameData.currentlyFishing;\n    GameData.set(Object.assign(Object.assign({}, savedGameData), { currentSkill: new Skill(skill.baseData, skill.level, skill.maxLevel, skill.xp, skill.xpMultipliers), currentlyFishing: new Fishing(fish.baseData, fish.level, fish.maxLevel, fish.xp, fish.xpMultipliers) }));\n};\nexport const increaseDay = () => {\n    GameData.update((data) => {\n        return Object.assign(Object.assign({}, data), { day: data.day + applySpeed(1) });\n    });\n};\nexport const togglePause = () => {\n    GameData.update((data) => {\n        return Object.assign(Object.assign({}, data), { paused: !data.paused });\n    });\n};\nexport const setCurrentlyFishing = (fishingKey) => {\n    GameData.update((data) => {\n        return Object.assign(Object.assign({}, data), { currentlyFishing: data.fishingData.get(fishingKey) });\n    });\n};\nexport const updateCurrentFish = () => {\n    GameData.update((data) => {\n        let fish = data.currentlyFishing || data.fishingData.get(\"Sun Fish\");\n        data.fishingData.get(fish.name).increaseXp();\n        fish.increaseXp();\n        return Object.assign(Object.assign({}, data), { fishingData: data.fishingData, currentlyFishing: fish, coins: (data.coins += applySpeed(fish.income)) });\n    });\n};\nexport const setCurrentSkill = (skillKey) => {\n    GameData.update((data) => {\n        let currentSkill = data.skillsData.get(skillKey);\n        if (data.autoTrain) {\n            currentSkill = lowestLevelSkill(data);\n        }\n        return Object.assign(Object.assign({}, data), { currentSkill });\n    });\n};\nexport const autoSetCurrentSkill = () => {\n    GameData.update((data) => {\n        let currentSkill = lowestLevelSkill(data);\n        return Object.assign(Object.assign({}, data), { currentSkill });\n    });\n};\nexport const autoSetCurrentlyFishing = () => {\n    GameData.update((data) => {\n        let currentlyFishing = highestTierFish(data);\n        return Object.assign(Object.assign({}, data), { currentlyFishing });\n    });\n};\nexport const updateCurrentSkill = () => {\n    GameData.update((data) => {\n        let skill = data.currentSkill || data.skillsData.get(\"Strength\");\n        data.skillsData.get(skill.name).increaseXp();\n        skill.increaseXp();\n        return Object.assign(Object.assign({}, data), { skillsData: data.skillsData });\n    });\n};\nexport const subtractCoins = (amount) => {\n    GameData.update((data) => {\n        return Object.assign(Object.assign({}, data), { coins: (data.coins -= amount) });\n    });\n};\nexport const updateItemExpenses = () => {\n    GameData.update((data) => {\n        if (data.coins <= 0) {\n            data.itemData.forEach((item) => item.deselect());\n            return Object.assign(Object.assign({}, data), { coins: 0, itemData: data.itemData });\n        }\n        return Object.assign(Object.assign({}, data), { coins: (data.coins -= applySpeed(getTotalExpenses(data))) });\n    });\n};\nexport const rebirthReset = () => {\n    GameData.update((data) => {\n        data.fishingData.forEach((fish) => {\n            if (fish.level > fish.maxLevel) {\n                fish.maxLevel = fish.level;\n            }\n            fish.level = 0;\n            fish.xp = 0;\n        });\n        data.skillsData.forEach((skill) => {\n            if (skill.level > skill.maxLevel) {\n                skill.maxLevel = skill.level;\n            }\n            skill.level = 0;\n            skill.xp = 0;\n        });\n        data.boatData.forEach((boat) => {\n            boat.baseData.bought = false;\n        });\n        data.itemData.forEach((item) => {\n            item.level = 0;\n            item.deselect();\n        });\n        return Object.assign(Object.assign({}, data), { coins: 0, day: 365 * 14, currentlyFishing: data.fishingData.get(\"Black Drum\"), currentSkill: data.skillsData.get(\"Strength\") });\n    });\n};\nexport const hardReset = () => {\n    window.localStorage.clear();\n    window.location.reload();\n};\nexport const toggleTrain = () => {\n    GameData.update((data) => {\n        return Object.assign(Object.assign({}, data), { autoTrain: !data.autoTrain });\n    });\n};\nexport const toggleFish = () => {\n    GameData.update((data) => {\n        return Object.assign(Object.assign({}, data), { autoFish: !data.autoFish });\n    });\n};\nexport let tempData = {\n    requirements: {},\n};\nexport let skillWithLowestMaxXp = null;\nexport const updateSpeed = 20;\nexport const baseLifespan = 365 * 70;\nexport const baseGameSpeed = 4;\nexport const permanentUnlocks = [];\nexport const fishBaseData = new Map(\n// Lake\n// 1. Sun Fish\n// 2. Perch\n// 3. Bass\n// 4. Trout\n// 4. Waleye\n// 5. Northern Pike\n// 6. Lake Sturgeon\n[\n    [\n        \"Sun Fish\",\n        {\n            name: \"Sun Fish\",\n            maxXp: 50,\n            income: 5,\n            effect: 0.01,\n            description: \"Fishing Pay\",\n            category: \"lake\",\n        },\n    ],\n    [\n        \"Perch\",\n        {\n            name: \"Perch\",\n            maxXp: 100,\n            income: 9,\n            effect: 0.01,\n            description: \"Jigging Xp\",\n            category: \"lake\",\n        },\n    ],\n    [\n        \"Bass\",\n        {\n            name: \"Bass\",\n            maxXp: 200,\n            income: 15,\n            effect: 0.01,\n            description: \"Casting Xp\",\n            category: \"lake\",\n        },\n    ],\n    [\n        \"Trout\",\n        {\n            name: \"Trout\",\n            maxXp: 400,\n            income: 40,\n            effect: 0.01,\n            description: \"Concentration Xp\",\n            category: \"lake\",\n        },\n    ],\n    [\n        \"Waleye\",\n        {\n            name: \"Waleye\",\n            maxXp: 800,\n            income: 80,\n            effect: 0.01,\n            description: \"Hooking Xp\",\n            category: \"lake\",\n        },\n    ],\n    [\n        \"Northern Pike\",\n        {\n            name: \"Northern Pike\",\n            maxXp: 1600,\n            income: 150,\n            effect: 0.01,\n            description: \"Trolling Xp\",\n            category: \"lake\",\n        },\n    ],\n    [\n        \"Lake Sturgeon\",\n        {\n            name: \"Lake Sturgeon\",\n            maxXp: 3200,\n            income: 300,\n            effect: 0.01,\n            description: \"Fishing Pay\",\n            category: \"lake\",\n        },\n    ],\n    // River\n    // 1. Pirana\n    // 2. Salmon\n    // 2. Silver Drum\n    // 3. Armoured Catfish\n    // 4. Electric Eel\n    // 5. Pacu\n    // 6. Payara\n    [\n        \"Pirana\",\n        {\n            name: \"Pirana\",\n            maxXp: 100,\n            income: 5,\n            effect: 0.01,\n            description: \"Ambition Xp\",\n            category: \"river\",\n        },\n    ],\n    [\n        \"Salmon\",\n        {\n            name: \"Salmon\",\n            maxXp: 1000,\n            income: 50,\n            effect: 0.01,\n            description: \"Patience Xp\",\n            category: \"river\",\n        },\n    ],\n    [\n        \"Silver Drum\",\n        {\n            name: \"Silver Drum\",\n            maxXp: 10000,\n            income: 120,\n            effect: 0.01,\n            description: \"Intelligence Xp\",\n            category: \"river\",\n        },\n    ],\n    [\n        \"Armoured Catfish\",\n        {\n            name: \"Armoured Catfish\",\n            maxXp: 100000,\n            income: 300,\n            effect: 0.01,\n            description: \"Reeling Xp\",\n            category: \"river\",\n        },\n    ],\n    [\n        \"Electric Eel\",\n        {\n            name: \"Electric Eel\",\n            maxXp: 1000000,\n            income: 1000,\n            effect: 0.01,\n            description: \"River Xp\",\n            category: \"river\",\n        },\n    ],\n    [\n        \"Pacu\",\n        {\n            name: \"Pacu\",\n            maxXp: 7500000,\n            income: 300,\n            effect: 0.01,\n            description: \"Concentration Xp\",\n            category: \"river\",\n        },\n    ],\n    [\n        \"Payara\",\n        {\n            name: \"Payara\",\n            maxXp: 4 * Math.pow(10, 7),\n            income: 15000,\n            effect: 0.01,\n            description: \"River Pay\",\n            category: \"river\",\n        },\n    ],\n    // Ocean\n    // 1. Cod\n    // 2. Mackerel\n    // 2. Angle Fish\n    // 4. Grouper\n    // Stingray\n    // 6. Barracuda\n    // 3. Bluefin tuna\n    // 5. Blue Marlin\n    // Swordfish\n    // Shark\n    // Whale\n    [\n        \"Cod\",\n        {\n            name: \"Cod\",\n            maxXp: 100000,\n            income: 100,\n            effect: 0.01,\n            description: \"Hooking Xp\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Mackerel\",\n        {\n            name: \"Mackerel\",\n            maxXp: Math.pow(10, 6),\n            income: 1000,\n            effect: 0.01,\n            description: \"Sailing Xp\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Angle Fish\",\n        {\n            name: \"Angle Fish\",\n            maxXp: Math.pow(10, 7),\n            income: 7500,\n            effect: 0.01,\n            description: \"Payara Pay\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Grouper\",\n        {\n            name: \"Grouper\",\n            maxXp: Math.pow(10, 8),\n            income: 50000,\n            effect: 0.01,\n            description: \"Strength Xp\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Stingray\",\n        {\n            name: \"Stingray\",\n            maxXp: Math.pow(10, 9),\n            income: 100000,\n            effect: 0.01,\n            description: \"Reeling Xp\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Barracuda\",\n        {\n            name: \"Barracuda\",\n            maxXp: Math.pow(10, 10),\n            income: 200000,\n            effect: 0.01,\n            description: \"Trolling Xp\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Bluefin Tuna\",\n        {\n            name: \"Bluefin Tuna\",\n            maxXp: Math.pow(10, 11),\n            income: 400000,\n            effect: 0.01,\n            description: \"Patience Xp\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Blue Marlin\",\n        {\n            name: \"Blue Marlin\",\n            maxXp: Math.pow(10, 12),\n            income: 800000,\n            effect: 0.01,\n            description: \"Communication Xp\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Swordfish\",\n        {\n            name: \"Swordfish\",\n            maxXp: Math.pow(10, 13),\n            income: 1600000,\n            effect: 0.01,\n            description: \"Navigation Xp\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Shark\",\n        {\n            name: \"Shark\",\n            maxXp: Math.pow(10, 13),\n            income: 2400000,\n            effect: 0.01,\n            description: \"All Xp\",\n            category: \"ocean\",\n        },\n    ],\n    [\n        \"Whale\",\n        {\n            name: \"Whale\",\n            maxXp: Math.pow(10, 13),\n            income: 3200000,\n            effect: 0.01,\n            description: \"All Xp\",\n            category: \"ocean\",\n        },\n    ],\n]);\nexport const skillBaseData = new Map([\n    // FUNDAMENTALS //\n    // Strength\n    // Concentration\n    // Intelligence\n    // Patience\n    // Ambition\n    // Communication\n    [\n        \"Strength\",\n        {\n            name: \"Strength\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Fishing Xp\",\n            category: \"fundamentals\",\n        },\n    ],\n    [\n        \"Concentration\",\n        {\n            name: \"Concentration\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Skill Xp\",\n            category: \"fundamentals\",\n        },\n    ],\n    [\n        \"Intelligence\",\n        {\n            name: \"Intelligence\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"River Xp\",\n            category: \"fundamentals\",\n        },\n    ],\n    [\n        \"Patience\",\n        {\n            name: \"Patience\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Lake Pay\",\n            category: \"fundamentals\",\n        },\n    ],\n    [\n        \"Ambition\",\n        {\n            name: \"Ambition\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"River Pay\",\n            category: \"fundamentals\",\n        },\n    ],\n    [\n        \"Communication\",\n        {\n            name: \"Communication\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Ocean Pay\",\n            category: \"fundamentals\",\n        },\n    ],\n    // FISHING SKILLS\n    // Casting\n    // Jigging\n    // Trolling\n    // Reeling\n    // Hooking\n    // Netting\n    // Whaling\n    [\n        \"Casting\",\n        {\n            name: \"Casting\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Lake Xp\",\n            category: \"fishing\",\n        },\n    ],\n    [\n        \"Jigging\",\n        {\n            name: \"Jigging\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Lake Pay\",\n            category: \"fishing\",\n        },\n    ],\n    [\n        \"Trolling\",\n        {\n            name: \"Trolling\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Northern Pay\",\n            category: \"fishing\",\n        },\n    ],\n    [\n        \"Reeling\",\n        {\n            name: \"Reeling\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Northern Pay\",\n            category: \"fishing\",\n        },\n    ],\n    [\n        \"Hooking\",\n        {\n            name: \"Hooking\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"River Pay\",\n            category: \"fishing\",\n        },\n    ],\n    [\n        \"Netting\",\n        {\n            name: \"Netting\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Ocean Pay\",\n            category: \"fishing\",\n        },\n    ],\n    [\n        \"Whaling\",\n        {\n            name: \"Whaling\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Whale Pay\",\n            category: \"fishing\",\n        },\n    ],\n    // Boating Skills\n    // Docking\n    // Turning\n    // Anchoring\n    // Sailing\n    // Navigation\n    // Stability\n    [\n        \"Docking\",\n        {\n            name: \"Docking\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Skill Xp\",\n            category: \"boating\",\n        },\n    ],\n    [\n        \"Turning\",\n        {\n            name: \"Turning\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"River Xp\",\n            category: \"boating\",\n        },\n    ],\n    [\n        \"Anchoring\",\n        {\n            name: \"Anchoring\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Lake Xp\",\n            category: \"boating\",\n        },\n    ],\n    [\n        \"Sailing\",\n        {\n            name: \"Sailing\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Ocean Xp\",\n            category: \"boating\",\n        },\n    ],\n    [\n        \"Navigation\",\n        {\n            name: \"Navigation\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Whale Pay\",\n            category: \"boating\",\n        },\n    ],\n    [\n        \"Stability\",\n        {\n            name: \"Stability\",\n            maxXp: 100,\n            effect: 0.01,\n            description: \"Fishing Pay\",\n            category: \"boating\",\n        },\n    ],\n]);\nexport const boatBaseData = new Map([\n    [\n        \"Row Boat\",\n        {\n            name: \"Row Boat\",\n            price: 300,\n            bought: false,\n        },\n    ],\n    [\n        \"Silver Bullet\",\n        {\n            name: \"Silver Bullet\",\n            price: 1500,\n            bought: false,\n        },\n    ],\n    [\n        \"Bass Boat\",\n        {\n            name: \"Bass Boat\",\n            price: 30000,\n            bought: false,\n        },\n    ],\n    [\n        \"Canoe\",\n        {\n            name: \"Canoe\",\n            price: 100000,\n            bought: false,\n        },\n    ],\n    [\n        \"River Skiff\",\n        {\n            name: \"River Skiff\",\n            price: 300000,\n            bought: false,\n        },\n    ],\n    [\n        \"Airboat\",\n        {\n            name: \"Airboat\",\n            price: 900000,\n            bought: false,\n        },\n    ],\n    [\n        \"Sail Boat\",\n        {\n            name: \"Sail Boat\",\n            price: 2700000,\n            bought: false,\n        },\n    ],\n    [\n        \"Yacht\",\n        {\n            name: \"Yacht\",\n            price: 8100000,\n            bought: false,\n        },\n    ],\n    [\n        \"Whaling Ship\",\n        {\n            name: \"Whaling Ship\",\n            price: 30000000,\n            bought: false,\n        },\n    ],\n    // BOATS //\n    // Row Boat\n    // Silver Bullet\n    // Bass Boat\n    // Canoe\n    // River Skiff\n    // Airboat\n    // Sail Boat\n    // Yacht\n    // Whaling Ship\n]);\nexport const itemBaseData = new Map([\n    // ITEMS //\n    // Rod\n    // Book\n    // Net\n    // Hook\n    // Bait\n    // Ham Sandwich\n    // Pliers\n    // Fish Finder\n    // House\n    [\n        \"Rod\",\n        {\n            name: \"Rod\",\n            expense: 10,\n            effect: 1.5,\n            description: \"Strength Xp\",\n            selected: false,\n            upgradePrice: 200,\n        },\n    ],\n    [\n        \"Book\",\n        {\n            name: \"Book\",\n            expense: 50,\n            effect: 1.5,\n            description: \"Skill Xp\",\n            selected: false,\n            upgradePrice: 1000,\n        },\n    ],\n    [\n        \"Net\",\n        {\n            name: \"Net\",\n            expense: 200,\n            effect: 2,\n            description: \"Fishing Xp\",\n            selected: false,\n            upgradePrice: 3000,\n        },\n    ],\n    [\n        \"Hook\",\n        {\n            name: \"Hook\",\n            expense: 1000,\n            effect: 2,\n            description: \"River Xp\",\n            selected: false,\n            upgradePrice: 5000,\n        },\n    ],\n    [\n        \"Bait\",\n        {\n            name: \"Bait\",\n            expense: 7500,\n            effect: 1.5,\n            description: \"All Xp\",\n            selected: false,\n            upgradePrice: 8000,\n        },\n    ],\n    [\n        \"Ham Sandwich\",\n        {\n            name: \"Ham Sandwich\",\n            expense: 50000,\n            effect: 3,\n            description: \"Boating Xp\",\n            selected: false,\n            upgradePrice: 10000,\n        },\n    ],\n    [\n        \"Pliers\",\n        {\n            name: \"Pliers\",\n            expense: 1000000,\n            effect: 2,\n            description: \"Skill Xp\",\n            selected: false,\n            upgradePrice: 15000,\n        },\n    ],\n    [\n        \"Fish Finder\",\n        {\n            name: \"Fish Finder\",\n            expense: Math.pow(10, 7),\n            effect: 1.5,\n            description: \"Skill Xp\",\n            selected: false,\n            upgradePrice: 20000,\n        },\n    ],\n    [\n        \"House\",\n        {\n            name: \"House\",\n            expense: Math.pow(10, 8),\n            effect: 3,\n            description: \"All Xp\",\n            selected: false,\n            upgradePrice: 200000,\n        },\n    ],\n]);\nexport const fishCategories = {\n    lake: [\"Sun Fish\", \"Perch\"],\n    river: [\"Trout\", \"P\"],\n    ocean: [\"Cod\", \"Mackerel\"],\n};\nexport const skillCategories = {\n    fundamentals: [\"Strength\", \"Concentration\"],\n    fishing: [],\n    boating: [],\n};\nexport const itemCategories = {};\nexport const units = [\"\", \"k\", \"M\", \"B\", \"T\", \"q\", \"Q\", \"Sx\", \"Sp\", \"Oc\"];\nexport const jobTabButton = document.getElementById(\"jobTabButton\");\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import { GameData } from \"src/gameData\";\n\n  let data_value: GameDataType;\n\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n</script>\n\n<div class=\"bg-red-300 w-full h-full\">\n  <p class=\"p-10 bg-yellow-500\">Achievements!</p>\n</div>\n\n<style></style>\n","<script lang=\"ts\">\n  export let headers: string[] = [\"Unknown\"];\n  export let headerColor: string = \"#04aa6d\";\n  import { capitalize } from \"src/functions\";\n\n  // headers I need:\n  // [\"Fundamentals\", \"Level\", \"Effect\", \"Xp/day\", \"Xp left\", \"Max Level\"]\n  // [\"Ocean\", \"Level\", \"Income/day\", \"Effect\", \"Xp/day\", \"Xp left\", \"Max Level\"]\n</script>\n\n<table class=\"w-full\">\n  <tr class=\"mt-4 mb-1\">\n    {#each headers as header, idx}\n      <th style=\"background-color: {headerColor}\">{capitalize(header)}</th>\n    {/each}\n  </tr>\n  <slot />\n</table>\n\n<style>\n  th {\n    padding: 12px 8px;\n    text-align: left;\n    color: white;\n  }\n\n  tr {\n    margin-bottom: 15px;\n    width: 100%;\n  }\n\n  table {\n    font-family: Arial, Helvetica, sans-serif;\n    border-collapse: collapse;\n    border-spacing: 0 0.5em;\n    width: 100%;\n  }\n</style>\n","<script lang=\"ts\">\n  export let name = \"\";\n  export let width = 10;\n  export let level: number = undefined;\n  export let selected: boolean = false;\n</script>\n\n<td>\n  <div class={`bar ${selected ? \"bg-purple-800\" : \"bg-purple-800\"} p-2`}>\n    <div class=\"text-top\">\n      {name}\n      {#if level}\n        {` lvl ${level}`}\n      {/if}\n    </div>\n    <div\n      class={`progress ${selected ? \"bg-pink-900\" : \"bg-purple-500\"}`}\n      style=\"width: {width}%; height: 100%;\"\n    />\n  </div>\n</td>\n\n<style>\n  .bar {\n    position: relative;\n    min-width: 160px;\n    max-width: 350px;\n    color: white;\n  }\n  .progress {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n  .text-top {\n    position: relative;\n    z-index: 3;\n  }\n</style>\n","<script lang=\"ts\">\n  import { coinAmounts } from \"src/functions\";\n  import { beforeUpdate } from \"svelte\";\n\n  export let amount: number;\n  export let large: boolean = false;\n  export let negative: boolean = undefined;\n  let coins;\n  beforeUpdate(() => {\n    coins = coinAmounts(amount);\n  });\n</script>\n\n<span class=\"flex justify-start text-lg items-center\" class:text-2xl={large}>\n  {#if negative}\n    <p class=\"text-red-500 text-xl\">-</p>\n  {:else if negative == false}\n    <p class=\"text-green-500 text-xl\">+</p>\n  {/if}\n  {#if coins.p > 0}\n    <p class=\"text-blue-500 w-1/4\">{coins.p}p</p>\n  {/if}\n  {#if coins.g > 0 || coins.p > 0}\n    <p class=\"text-yellow-400 w-1/4\">{coins.g}g</p>\n  {/if}\n  {#if coins.s > 0 || coins.g > 0 || coins.p > 0}\n    <p class=\"text-gray-300 w-1/4\">{coins.s}s</p>\n  {/if}\n  <p class=\"text-yellow-800 w-1/4\">{coins.c}c</p>\n</span>\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import type { Fishing, Requirement } from \"src/classes\";\n  import { fishBaseData, GameData, setCurrentlyFishing } from \"src/gameData\";\n  import {\n    filtered,\n    formatNumber,\n    getRequiredString,\n    needRequirements,\n  } from \"src/functions\";\n  import XpBar from \"src/components/XpBar.svelte\";\n  import Coins from \"src/components/Coins.svelte\";\n\n  let data_value: GameDataType;\n  export let allFish: Fishing[] = [];\n\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n\n  const setCurrent = (name: string) => {\n    setCurrentlyFishing(name);\n  };\n\n  const getValues = (fish: Fishing): any[] => {\n    // [\"Level\", \"Income/day\", \"Effect\", \"Xp/day\", \"Xp left\", \"Max Level\"]\n\n    return [\n      fish.level,\n      fish.income,\n      fish.effectDescription,\n      formatNumber(fish.xpGain),\n      formatNumber(fish.xpLeft),\n      fish.maxLevel,\n    ];\n  };\n</script>\n\n{#each filtered(data_value, allFish) as fish, idx}\n  {#if !needRequirements(data_value, fish)}\n    <tr class=\"cursor-pointer\" on:click={() => setCurrent(fish.name)}>\n      <XpBar\n        name={fish.name}\n        width={fish.barWidth}\n        selected={data_value.currentlyFishing.name === fish.name}\n      />\n      {#each getValues(fish) as value, idx}\n        {#if idx == 1}\n          <td><Coins amount={value} /></td>\n        {:else}\n          <td>{value}</td>\n        {/if}\n      {/each}\n    </tr>\n  {/if}\n{/each}\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import type { Requirement } from \"src/classes\";\n  import { GameData } from \"src/gameData\";\n  import Coins from \"src/components/Coins.svelte\";\n  import { daysToYears } from \"src/functions\";\n  import { beforeUpdate } from \"svelte\";\n\n  export let taskOrItem: any;\n  let data_value: GameDataType;\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n  let reqs: Requirement[] = data_value.requirements.get(taskOrItem.name);\n  beforeUpdate(() => {\n    reqs = data_value.requirements.get(taskOrItem.name);\n  });\n\n  const taskString = (requirement: any, type) => {\n    let name = requirement.name;\n    let levelNow =\n      type == \"skill\"\n        ? data_value.skillsData.get(name).level\n        : data_value.fishingData.get(name).level;\n\n    return `${name} level ${levelNow}/${requirement.requirement} `;\n  };\n  const ageString = (requirement: any) => {\n    return `${daysToYears(requirement.requirement)} years old `;\n  };\n</script>\n\n<div class=\"w-full mb-8 flex justify-between text-lg\">\n  <span class=\"font-bold\">Required: </span>\n  {#each reqs as req}\n    {#each req.requirements as sameTypeReq}\n      {#if [\"fishing\", \"skill\"].includes(req.type)}\n        <span>{taskString(sameTypeReq, req.type)}</span>\n      {:else if req.type == \"age\"}\n        <span>{ageString(sameTypeReq)}</span>\n      {:else if req.type == \"boat\"}\n        <span>{sameTypeReq.name}</span>\n      {:else if req.type == \"coins\"}\n        <span class=\"w-1/4\">\n          <Coins amount={sameTypeReq.requirement} large={true} />\n        </span>\n      {:else}\n        <span>Unknown</span>\n      {/if}\n    {/each}\n  {/each}\n</div>\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import ProgressTable from \"src/components/ProgressTable.svelte\";\n  import type { Fishing } from \"src/classes\";\n  import { GameData, fishCategories } from \"src/gameData\";\n  import FishBars from \"src/components/FishBars.svelte\";\n  import { onMount } from \"svelte\";\n  import { filtered, getRequiredString, needRequirements } from \"src/functions\";\n  import RequiredBar from \"src/components/RequiredBar.svelte\";\n\n  let data_value: GameDataType;\n  let fishingData;\n  let commonHeaders: string[] = [\n    \"Level\",\n    \"Income/day\",\n    \"Effect\",\n    \"Xp/day\",\n    \"Xp left\",\n    \"Max Level\",\n  ];\n  let allHeaders: string[][] = [[]];\n\n  onMount(() => {\n    Object.keys(fishCategories).forEach((key) => {\n      allHeaders.push([key, ...commonHeaders]);\n    });\n  });\n\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n\n  const getAllFish = (\n    fishingData: Map<string, Fishing>,\n    cateogry: string\n  ): Fishing[] => {\n    let fishArr = [];\n    fishingData.forEach((fish) => {\n      if (fish.baseData.category == cateogry) {\n        fishArr.push(fish);\n      }\n    });\n    return fishArr;\n  };\n</script>\n\n<div class=\"w-full h-full bg-gray-700 p-2 mt-2\">\n  {#each allHeaders as headers}\n    <div class=\"mb-3\">\n      <ProgressTable {headers}>\n        <FishBars allFish={getAllFish(data_value.fishingData, headers[0])} />\n      </ProgressTable>\n      {#each filtered(data_value, getAllFish(data_value.fishingData, headers[0])) as fish, idx}\n        {#if needRequirements(data_value, fish)}\n          <RequiredBar taskOrItem={fish} />\n        {/if}\n      {/each}\n    </div>\n  {/each}\n</div>\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import type { Boat } from \"src/classes\";\n  import { GameData } from \"src/gameData\";\n  import Coins from \"src/components/Coins.svelte\";\n  import { filtered, getRequiredString, needRequirements } from \"src/functions\";\n\n  let data_value: GameDataType;\n  export let boats: Boat[] = [];\n\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n</script>\n\n{#each filtered(data_value, boats) as boat}\n  {#if !needRequirements(data_value, boat)}\n    <tr class=\"cursor-pointer\" on:click={() => boat.buy()}>\n      <td\n        >{boat.baseData.name}\n        <span class=\"text-green-400\">{boat.bought ? \"Purchased\" : \"\"}</span></td\n      >\n      <td><Coins amount={boat.baseData.price} /></td>\n    </tr>\n  {/if}\n{/each}\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import type { Item } from \"src/classes\";\n  import { GameData } from \"src/gameData\";\n  import Coins from \"src/components/Coins.svelte\";\n  import { filtered, getRequiredString, needRequirements } from \"src/functions\";\n\n  let data_value: GameDataType;\n  export let items: Item[] = [];\n\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n\n  const getValues = (item: Item) => {\n    return [\n      item.name,\n      item.upgradePrice,\n      item.effectDescription,\n      item.level,\n      item.expense,\n    ];\n  };\n</script>\n\n{#each filtered(data_value, items) as item}\n  {#if !needRequirements(data_value, item)}\n    <tr>\n      {#each getValues(item) as value, idx}\n        {#if idx == 0}\n          <td\n            class=\"cursor-pointer bg-purple-400 text-white\"\n            class:bg-pink-900={item.selected}\n            on:click={() => item.select()}>{value}</td\n          >\n        {:else if idx == 1}\n          <td\n            class=\"cursor-pointer bg-purple-700 text-white hover:bg-purple-800\"\n            on:click={() => item.upgrade()}><Coins amount={+value} /></td\n          >\n        {:else if idx == 4}\n          <td>\n            <Coins amount={+value} />\n          </td>\n        {:else}\n          <td>{value}</td>\n        {/if}\n      {/each}\n    </tr>\n  {/if}\n{/each}\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import ProgressTable from \"src/components/ProgressTable.svelte\";\n  import type { Boat, Item } from \"src/classes\";\n  import { GameData } from \"src/gameData\";\n  import Coins from \"src/components/Coins.svelte\";\n  import { filtered, getRequiredString, needRequirements } from \"src/functions\";\n  import BoatBars from \"src/components/BoatBars.svelte\";\n  import ItemBars from \"src/components/ItemBars.svelte\";\n  import RequiredBar from \"src/components/RequiredBar.svelte\";\n\n  let data_value: GameDataType;\n\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n\n  const getBoats = (boatData: Map<string, Boat>): Boat[] => {\n    let boatArr: Boat[] = [];\n    boatData.forEach((boat) => {\n      boatArr.push(boat);\n    });\n    return boatArr;\n  };\n  const getItems = (itemData: Map<string, Item>): Item[] => {\n    let itemArr: Item[] = [];\n    itemData.forEach((item) => {\n      itemArr.push(item);\n    });\n    return itemArr;\n  };\n</script>\n\n<div class=\"w-full h-full bg-gray-700 p-2 mt-2\">\n  <div class=\"mb-3\">\n    <ProgressTable headers={[\"Boats\", \"Price\"]}>\n      <BoatBars boats={getBoats(data_value.boatData)} />\n    </ProgressTable>\n    {#each filtered(data_value, getBoats(data_value.boatData)) as boat}\n      {#if needRequirements(data_value, boat)}\n        <div class=\"w-full mb-8\">\n          <RequiredBar taskOrItem={boat} />\n        </div>\n      {/if}\n    {/each}\n  </div>\n\n  <div class=\"mb-3\">\n    <ProgressTable\n      headers={[\"Item\", \"Upgrade\", \"Effect\", \"Level\", \"Expense/Day\"]}\n    >\n      <ItemBars items={getItems(data_value.itemData)} />\n    </ProgressTable>\n    {#each filtered(data_value, getItems(data_value.itemData)) as item}\n      {#if needRequirements(data_value, item)}\n        <RequiredBar taskOrItem={item} />\n      {/if}\n    {/each}\n  </div>\n</div>\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import type { Skill } from \"src/classes\";\n  import { GameData, setCurrentSkill } from \"src/gameData\";\n  import XpBar from \"src/components/XpBar.svelte\";\n  import { filtered, formatNumber, needRequirements } from \"src/functions\";\n\n  let data_value: GameDataType;\n  export let skills: Skill[] = [];\n\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n\n  const setCurrent = (name: string) => {\n    setCurrentSkill(name);\n  };\n\n  const getValues = (skill: Skill): any[] => {\n    // [\"Level\", \"Income/day\", \"Effect\", \"Xp/day\", \"Xp left\", \"Max Level\"]\n\n    return [\n      skill.level,\n      skill.effectDescription,\n      formatNumber(skill.xpGain),\n      formatNumber(skill.xpLeft),\n      skill.maxLevel,\n    ];\n  };\n</script>\n\n{#each filtered(data_value, skills) as skill}\n  {#if !needRequirements(data_value, skill)}\n    <tr class=\"cursor-pointer\" on:click={() => setCurrent(skill.name)}>\n      <XpBar\n        name={skill.name}\n        width={skill.barWidth}\n        selected={data_value.currentSkill.name === skill.name}\n      />\n      {#each getValues(skill) as value}\n        <td>{value}</td>\n      {/each}\n    </tr>\n  {/if}\n{/each}\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import ProgressTable from \"src/components/ProgressTable.svelte\";\n  import type { Skill } from \"src/classes\";\n  import { GameData, skillCategories } from \"src/gameData\";\n  import SkillBars from \"src/components/SkillBars.svelte\";\n  import { onMount } from \"svelte\";\n  import { filtered, getRequiredString, needRequirements } from \"src/functions\";\n  import RequiredBar from \"src/components/RequiredBar.svelte\";\n\n  let data_value: GameDataType;\n  let commonHeaders: string[] = [\n    \"Level\",\n    \"Effect\",\n    \"Xp/day\",\n    \"Xp left\",\n    \"Max Level\",\n  ];\n\n  let allHeaders: string[][] = [[]];\n\n  onMount(() => {\n    Object.keys(skillCategories).forEach((key) => {\n      allHeaders.push([key, ...commonHeaders]);\n    });\n  });\n\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n\n  const getSkills = (skills: Map<string, Skill>, category: string): Skill[] => {\n    let skillArr: Skill[] = [];\n    skills.forEach((skill) => {\n      if (skill.baseData.category == category) {\n        skillArr.push(skill);\n      }\n    });\n    return skillArr;\n  };\n</script>\n\n<div class=\"w-full h-full bg-gray-700 p-2 mt-2\">\n  {#each allHeaders as headers}\n    <div class=\"mb-3\">\n      <ProgressTable {headers}>\n        <SkillBars skills={getSkills(data_value.skillsData, headers[0])} />\n      </ProgressTable>\n      {#each filtered(data_value, getSkills(data_value.skillsData, headers[0])) as skill}\n        {#if needRequirements(data_value, skill)}\n          <RequiredBar taskOrItem={skill} />\n        {/if}\n      {/each}\n    </div>\n  {/each}\n</div>\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import { GameData, hardReset } from \"src/gameData\";\n\n  let data_value: GameDataType;\n\n  GameData.subscribe((data) => {\n    data_value = data;\n  });\n</script>\n\n<div class=\"bg-gray-white w-full h-full\">\n  <p class=\"p-10 bg-gray-500 text-white text-xl font-bold w-full\">Settings!</p>\n  <button\n    class=\"btn bg-gray-800 border-red-500 border-2 text-red-500 font-bold\"\n    on:click={hardReset}>Reset Full Game</button\n  >\n</div>\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import type { Fishing, Skill } from \"src/classes\";\n\n  import {\n    calculatedAge,\n    getIncomeMultipliers,\n    getTotalExpenses,\n  } from \"src/functions\";\n  import { toggleTrain, togglePause, GameData, toggleFish } from \"src/gameData\";\n\n  import Coins from \"src/components/Coins.svelte\";\n  import XpBar from \"src/components/XpBar.svelte\";\n\n  let data_value: GameDataType;\n  let coins: number;\n  let currentlyFishing: Fishing;\n  let currentSkill: Skill;\n\n  GameData.subscribe((data) => {\n    data_value = data;\n    coins = data.coins;\n    currentlyFishing = data.currentlyFishing;\n    currentSkill = data.currentSkill;\n  });\n\n  const getNet = (income, expense): number => {\n    if (negative(income, expense)) {\n      return expense - income;\n    }\n    return income - expense;\n  };\n  const negative = (income, expense) => {\n    if (income - expense < 0) {\n      return true;\n    }\n    return false;\n  };\n</script>\n\n<div class=\"flex flex-col w-1/4 bg-gray-900 text-white mx-2\">\n  <div class=\"m-3 flex\">\n    <p class=\"text-lg\">{calculatedAge(data_value.day)}</p>\n  </div>\n  <div class=\"m-3 flex flex-col\">\n    <button\n      class=\"px-9 py-4 bg-gray-700 hover:bg-gray-800 text-white\"\n      on:click={togglePause}>{data_value.paused ? \"Play\" : \"Pause\"}</button\n    >\n  </div>\n  <div class=\"m-3 flex flex-col\">\n    <p class=\"text-xl\">Coins</p>\n    <Coins amount={coins} large={true} />\n  </div>\n  <div class=\"m-3 flex flex-col\">\n    {#if currentlyFishing}\n      <span class=\"text-blue-400\"\n        >Net/day:\n\n        <Coins\n          amount={getNet(currentlyFishing.income, getTotalExpenses(data_value))}\n          negative={negative(\n            currentlyFishing.income,\n            getTotalExpenses(data_value)\n          )}\n        /></span\n      >\n      <span class=\"text-green-400\"\n        >Income/day: <Coins amount={currentlyFishing.income} /></span\n      >\n    {/if}\n    <span class=\"text-red-500\"\n      >Expense/day: <Coins amount={getTotalExpenses(data_value)} /></span\n    >\n  </div>\n\n  <div class=\"m-3 flex flex-col\">\n    {#if currentlyFishing}\n      <XpBar\n        name={currentlyFishing.name}\n        width={currentlyFishing.barWidth}\n        level={currentlyFishing.level}\n        selected={true}\n      />\n      <p class=\"text-lg text-gray-400\">Currently Fishing</p>\n    {/if}\n  </div>\n  <div class=\"m-3 flex flex-col\">\n    {#if currentSkill}\n      <XpBar\n        name={currentSkill.name}\n        width={currentSkill.barWidth}\n        level={currentSkill.level}\n        selected={true}\n      />\n    {/if}\n    <p class=\"text-lg text-gray-400\">Current Skill</p>\n  </div>\n  <div class=\"m-3 flex flex-col text-white\">\n    <div class=\"flex items-center mb-1\">\n      <input\n        class=\"mr-4 h-6 w-6\"\n        name=\"autoTrain\"\n        type=\"checkbox\"\n        on:change={toggleTrain}\n        checked={data_value.autoTrain}\n      />\n      <label for=\"autoTrain\">Auto Train</label>\n    </div>\n    <div class=\"flex items-center\">\n      <input\n        class=\"mr-4 h-6 w-6\"\n        name=\"autoFish\"\n        type=\"checkbox\"\n        on:change={toggleFish}\n        checked={data_value.autoFish}\n      />\n      <label for=\"autoTrain\">Auto Promote Fish</label>\n    </div>\n  </div>\n</div>\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import { GameData, rebirthReset } from \"src/gameData\";\n\n  let data_value: GameDataType;\n  let day: number;\n\n  GameData.subscribe((data) => {\n    data_value = data;\n    day = data.day;\n  });\n</script>\n\n<div class=\"bg-gray-white w-full h-full\">\n  <p class=\"p-10 bg-indigo-400 text-white text-xl font-bold w-full\">\n    Reincarnation!\n  </p>\n  {#if day > 365 * 60}\n    <p>\n      There is a glowing rock that is sparkling gold and silver. It is big\n      enough to sit upon and wonder.\n    </p>\n  {/if}\n  {#if day >= 365 * 70}\n    <button\n      class=\"btn bg-gray-800 border-yellow-400 border-2 text-yellow-200 font-bold\"\n      on:click={rebirthReset}>Sit on the rock</button\n    >\n  {/if}\n</div>\n","<script lang=\"ts\">\n  import type { GameDataType } from \"src/Entities\";\n  import Achievements from \"src/tabs/Achievements.svelte\";\n  import GoneFishing from \"src/tabs/GoneFishing.svelte\";\n  import Shop from \"src/tabs/Shop.svelte\";\n  import Skills from \"src/tabs/Skills.svelte\";\n  import Settings from \"src/tabs/Settings.svelte\";\n  import Coins from \"src/components/Coins.svelte\";\n\n  import {\n    calculatedAge,\n    coinAmounts,\n    createData,\n    loadGameData,\n    saveGameData,\n  } from \"./functions\";\n  import {\n    boatBaseData,\n    fishBaseData,\n    GameData,\n    itemBaseData,\n    skillBaseData,\n    updateSpeed,\n    togglePause,\n    update,\n    setCurrentSkill,\n    setCurrentlyFishing,\n  } from \"./gameData\";\n  import Sidebar from \"src/Sidebar.svelte\";\n  import Reincarnation from \"src/tabs/Reincarnation.svelte\";\n\n  type Tab =\n    | \"goneFishing\"\n    | \"skills\"\n    | \"shop\"\n    | \"achievements\"\n    | \"settings\"\n    | \"reincarnation\";\n  let selectedTab: Tab = \"skills\";\n\n  let data_value: GameDataType;\n  let coins: number;\n\n  GameData.subscribe((data) => {\n    data_value = data;\n    coins = data.coins;\n  });\n\n  createData(data_value.fishingData, fishBaseData);\n  createData(data_value.skillsData, skillBaseData);\n  createData(data_value.itemData, itemBaseData);\n  createData(data_value.boatData, boatBaseData);\n\n  loadGameData();\n\n  const setCurrents = () => {\n    if (!data_value.currentSkill) {\n      setCurrentSkill(\"Strength\");\n    }\n    if (!data_value.currentlyFishing) {\n      setCurrentlyFishing(\"Sun Fish\");\n    }\n  };\n\n  setCurrents();\n  const updateGame = () => {\n    update(data_value.paused, data_value.autoTrain, data_value.autoFish);\n  };\n  const masterInterval: number = window.setInterval(\n    updateGame,\n    1000 / updateSpeed\n  );\n  const saveInterval: number = window.setInterval(\n    () => saveGameData(data_value),\n    3000\n  );\n\n  const selectTab = (selected: Tab) => {\n    selectedTab = selected;\n  };\n</script>\n\n<main class=\"bg-gray-600 min-h-screen text-white\">\n  <h1 class=\"text-6xl text-center p-6\">Idle Fishing</h1>\n  <div class=\"flex flex-row\">\n    <Sidebar />\n\n    <div class=\"flex flex-col mr-2 w-3/4 overflow-x-auto\">\n      <div class=\"flex flex-row bg-gray-800 text-white justify-between\">\n        <div class=\"flex flex-row\">\n          <button\n            class=\"btn\"\n            class:bg-blue-900={selectedTab == \"skills\"}\n            on:click={() => selectTab(\"skills\")}>Skills</button\n          >\n          <button\n            class=\"btn\"\n            class:bg-blue-900={selectedTab == \"goneFishing\"}\n            on:click={() => selectTab(\"goneFishing\")}>Gone Fishing</button\n          >\n          <button\n            class=\"btn\"\n            class:bg-blue-900={selectedTab == \"achievements\"}\n            on:click={() => selectTab(\"achievements\")}>Achievements</button\n          >\n          <button\n            class=\"btn\"\n            class:bg-blue-900={selectedTab == \"shop\"}\n            on:click={() => selectTab(\"shop\")}>Shop</button\n          >\n          {#if data_value.day > 365 * 50}\n            <button\n              class=\"btn\"\n              class:bg-blue-900={selectedTab == \"reincarnation\"}\n              on:click={() => selectTab(\"reincarnation\")}>Reincarnation</button\n            >\n          {/if}\n        </div>\n        <button\n          class=\"btn\"\n          class:bg-blue-900={selectedTab == \"settings\"}\n          on:click={() => selectTab(\"settings\")}>Settings</button\n        >\n      </div>\n\n      <div class=\"flex flex-col\">\n        {#if selectedTab == \"skills\"}\n          <Skills />\n        {:else if selectedTab == \"goneFishing\"}\n          <GoneFishing />\n        {:else if selectedTab == \"achievements\"}\n          <Achievements />\n        {:else if selectedTab == \"shop\"}\n          <Shop />\n        {:else if selectedTab == \"reincarnation\"}\n          <Reincarnation />\n        {:else}\n          <Settings />\n        {/if}\n      </div>\n    </div>\n  </div>\n</main>\n\n<style global lang=\"postcss\">\n  @tailwind base;\n  @tailwind components;\n  @tailwind utilities;\n\n  * {\n    transition: all 0.1s linear;\n  }\n  .btn {\n    @apply hover:bg-gray-900 py-5 px-10;\n  }\n  tr {\n    border-bottom: 1px solid #666;\n  }\n  td {\n    padding: 12px 0px 12px 10px;\n  }\n</style>\n","import App from \"./App.svelte\";\nconst app = new App({\n    target: document.body,\n    props: {\n        name: \"world\",\n    },\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","get_slot_context","definition","ctx","$$scope","tar","src","k","assign","slice","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","setProperty","toggle_class","toggle","classList","current_component","set_current_component","component","get_current_component","Error","beforeUpdate","$$","before_update","push","onMount","on_mount","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","callback","has","add","clear","fragment","dirty","p","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","daysToYears","days","Math","floor","calculatedAge","day","getTotalExpenses","game_data","totalExpense","itemData","item","selected","expense","capitalize","str","charAt","toUpperCase","applySpeed","baseGameSpeed","getGameData","paused","baseLifespan","updateSpeed","needRequirements","data_value","requiredFor","reqs","requirements","get","undefined","isCompleted","filtered","allRequiredFor","filteredTasks","formatNumber","number","toFixed","tier","log10","suffix","units","pow","lowestLevelSkill","xpDict","skills","skillsData","s","set","level","size","lowest","entries","sort","next","applyMultipliers","multipliers","values","reduce","num","total","createData","baseData","base","entity","Fishing","Skill","Boat","Item","createEntity","replacer","dataType","reviver","loadGameData","GameDataSave","JSON","parse","localStorage","getItem","fishingData","boatData","GameData","subscribe","dict","saveDict","tempData","replaceSaveDict","saveMap","val","newReqArr","req","FishingRequirement","SkillRequirement","CoinRequirement","EvilRequirement","BoatRequirement","AgeRequirement","Requirement","maxLevel","xp","xpMultipliers","incomeMultipliers","replaceSavedFishing","replaceSavedSkills","expenseMultipliers","replaceSavedItems","replaceSavedBoats","setGameData","Task","constructor","maxXp","round","xpLeft","maxLevelMultiplier","xpGain","task","kind","description","effect","category","fish","skill","getXpMultipliers","barWidth","increaseXp","excess","super","levelMultiplier","income","getIncomeMultipliers","effectDescription","String","select","deselect","upgradePrice","upgrade","coins","subtractCoins","bought","buy","price","completed","getCondition","requirement","evil","subscriber_queue","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","writable","autoTrain","autoFish","rebirthOneCount","rebirthTwoCount","currentlyFishing","currentSkill","savedGameData","increaseDay","togglePause","setCurrentlyFishing","fishingKey","updateCurrentFish","setCurrentSkill","skillKey","autoSetCurrentSkill","autoSetCurrentlyFishing","availableFish","f","highestTierFish","updateCurrentSkill","amount","updateItemExpenses","rebirthReset","boat","hardReset","window","location","reload","toggleTrain","toggleFish","fishBaseData","skillBaseData","boatBaseData","itemBaseData","fishCategories","lake","river","ocean","skillCategories","fundamentals","fishing","boating","getElementById","slot_ctx","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","lets","merged","len","max","headers","headerColor","width","g","large","negative","coinsObj","tiers","leftOver","x","coinAmounts","allFish","setCurrent","includes","taskOrItem","commonHeaders","allHeaders","cateogry","fishArr","boats","items","boatArr","itemArr","skillArr","selectedTab","setInterval","setItem","stringify","saveGameData","selectTab","body"],"mappings":"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"}